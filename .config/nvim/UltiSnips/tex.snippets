priority 100

snippet ;beg "Create Environment" bA
\\begin{$1}
$0
\\end{$1}
endsnippet

snippet ;m "Inline Math" wA
$${1}$`!p
if t[2] and t[2][0] not in [',', '.', '?', '-', ' ']:
	snip.rv = ' '
else:
	snip.rv = ''
`$2
endsnippet

snippet ;dm "Display Math" wA
\[
$1
.\]
$0
endsnippet

snippet '([A-Za-z])(\d)' "Auto Subscript" wrA
`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
endsnippet

snippet '([A-Za-z])_(\d\d)' "Auto Subscript2" wrA
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`}
endsnippet

snippet ;sp "Superscript" iA
^{$1}$0
endsnippet

snippet ;sb "Subscript" iA
_{$1}$0
endsnippet

snippet // "Fraction" iA
\\frac{${1:${VISUAL:text}}}{$2}$0
endsnippet

# Perform calculations using WolframScript
# Example:
# Typing "wolfram <TAB> Integrate[Tan[x], x]" will expand to the 1st snippet,
# that returns "wolfram Integrate[Tan[x], x] wolfram". By pressing <TAB> again
# we trigger the 2nd snippet, that calls wolframscript via Python and returns 
# "-\log (\cos (x))".
priority 1000
snippet wolfram "Prepare WolframScript evaluation" w
wolfram $1 wolfram$0
endsnippet

priority 10000
snippet 'wolfram(.*)wolfram' "Evaluate WolframScript" wr
`!p
import subprocess
code = 'ToString[' + match.group(1) + ', TeXForm]'
snip.rv = subprocess.check_output(['wolframscript', '-code', code])
`
endsnippet

# vim:ft=snippets
